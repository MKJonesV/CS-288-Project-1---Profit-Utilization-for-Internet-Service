package edu.iastate.cs228.hw1;
//@author Michael Jones

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;


public class Town {

  TownCell[][] grid;

  private int length;
  private int width;

  public Town(String inputFileName) throws FileNotFoundException 
  {
    try{
      File instructions = new File(inputFileName);
      Scanner fileReader = new Scanner(instructions);
      String data = fileReader.nextLine();
      String[] nums = data.split(" ");
      grid = new TownCell[Integer.parseInt(nums[0])][Integer.parseInt(nums[1])];
      length = Integer.parseInt(nums[0]);
      width = Integer.parseInt(nums[1]);
        for(int i = 0; i < length; i++){
          String row = fileReader.nextLine();
          for(int j = 0; j < width; j++){
            grid[i][j] = makeTownCell(row.substring(j, j+1), i, j, this);
          }
        }
    } catch(FileNotFoundException e){
      System.out.println("File not found");
    }
  }

  // Initializes the grid based off of the length and width parameters inputted by the user
  
  public Town(int l, int w){
    grid = new TownCell[l][w];
    length = l;
    width = w;
  }

  // Creates a TownCell to be stored at specific coordinates in the grid based off of the random values generated by the Random class.
  
  public TownCell makeTownCell(int i, int x, int y, Town t){
    if(i == 0){
      Casual c = new Casual(t, x, y);
      return c;
    } else if(i == 1){
      Streamer s = new Streamer(t, x, y);
      return s;
    } else if(i == 2){
      Reseller r = new Reseller(t, x, y);
      return r;
    } else if(i == 4){
      Outage o = new Outage(t, x, y);
      return o;
    } else {
      Empty e = new Empty(t, x, y);
      return e;
    }
  }

  // Creates a TownCell to be stored at specific coordinates in the grid based off of the character in the string from the 2D array in generateGrid.
  
  public TownCell makeTownCell(String str, int x, int y, Town t){
    if(str.equals("C")){
      Casual c = new Casual(t, x, y);
      return c;
    } else if(str.equals("S")){
      Streamer s = new Streamer(t, x, y);
      return s;
    } else if(str.equals("R")){
      Reseller r = new Reseller(t, x, y);
      return r;
    } else if(str.equals("O")){
      Outage o = new Outage(t, x, y);
      return o;
    } else {
      Empty e = new Empty(t, x, y);
      return e;
    }
  }

  // Returns the length of the grid
  
  public int getLength(){
    return length;
  }

  // Returns the width of the grid
  
  public int getWidth(){
    return width;
  }

  // Returns a string that represents the Town's grid by using the first initial of the State of the TownCell.

  public String toString() {
    String s = "";
      for(int i = 0; i < this.getLength(); i++){
        for(int j = 0; j < this.getWidth(); j++){
          s += (grid[i][j]+" ");
        }
        s += "\n";
      }
    return s;
  }

  // Sets the TownCell at the specified coordinates to next month's iteration of the previous TownCell.
  
  public void setCell(int x, int y, Town tOld){
    grid[x][y] = tOld.grid[x][y].next(this);
  }
  
  
}
